<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>All Employees</title>
  <script src="https://cdn.jsdelivr.net/npm/jwt-decode@3.1.2/build/jwt-decode.min.js"></script>
 <style>
    /* General Styles */
body {
    background: linear-gradient(135deg, #000000, #1e3d59); /* Dark gradient background */
    color: #f5f5f5; /* Light-colored text for contrast */
    padding: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    min-height: 100vh;
    width: 100vw;
    margin: 0;
    font-family: Arial, sans-serif;
}

/* Heading Styles */
h2 {
    text-align: center;
    margin-top: 20px;
    color: #2c3e50;
}

/* Table Styles */
#employeesTable {
    width: 100%;
    margin: 20px auto;
    border-collapse: collapse;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    background-color: transparent;
}

#employeesTable th, #employeesTable td {
    padding: 10px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

#employeesTable th {
    background-color: #2c3e50;
    color: white;
}

#employeesTable tr:hover {
    background: linear-gradient(45deg, #2575fc, #296638); }




    #employeesTable button {
    padding: 6px 12px;
    background-color: transparent; /* Transparent background */
    color: transparent; /* Make text transparent */
    border: 2px solid #6a11cb; /* Border with matching purple color */
    border-radius: 4px;
    cursor: pointer;
    font-size: 12px;
    margin: 5px;
    background-image: linear-gradient(45deg, #6a11cb, #2575fc); 
    -webkit-background-clip: text; 
    background-clip: text; 
    transition: all 0.3s ease; 
}

#employeesTable button:hover {
    border-color: #2575fc; 
    color: #2575fc; 
}


/* Form Styles */
#editEmployeeForm {
    width: 100%;
    max-width: 600px;
    margin: 20px auto;
    background-color: transparent;
    padding: 20px;
    color: #3498db;
    border-radius: 5px;
    display: none;
}

#editEmployeeForm h3 {
    color: #6f7983;
    text-align: center;
}

form label {
    font-size: 14px;
    color: #555;
    margin-top: 10px;
}

form input, form select {
    width: 100%;
    padding: 10px;
    margin: 5px 0 20px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
    transition: border-color 0.3s ease;
}

/* Highlight placeholder text */
form input::placeholder,
form select::placeholder {
    color: #999;
    opacity: 0.7;
}

form input:focus, form select:focus {
    border-color: #3498db;
}

/* Paired fields layout */
.form-pair {
    display: flex;
    justify-content: space-between;
    gap: 20px;
}

.form-group {
    width: 48%;
}

.form-pair .form-group input,
.form-pair .form-group select {
    width: 100%;
}

/* Button Styles */
form button {
    padding: 10px 20px;
    background-color: #3498db;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 10px;
    font-size: 16px;
    transition: background-color 0.3s ease;
}

form button:hover {
    background-color: #2980b9;
}

form button[type="button"] {
    padding: 6px 12px;
    background-color: transparent; /* Transparent background */
    color: blue; /* Make text transparent */
    border: 2px solid #6a11cb; /* Border with matching purple color */
    border-radius: 4px;
    cursor: pointer;
    width: 46%;
    font-size: 12px;
    margin: 5px;
    background-image: linear-gradient(45deg, #6a11cb, #2575fc); 
    -webkit-background-clip: text; 
    background-clip: text; 
    transition: all 0.3s ease; 
}

form button[type="button"]:hover {
    background-color: #c0392b;
}

/* Mobile Responsive */
/* Mobile Responsive */
@media screen and (max-width: 768px) {
    /* Table Styles */
    #employeesTable {
        width: 95%;
        margin: 10px auto;
    }

    #employeesTable th, #employeesTable td {
        padding: 8px;
        font-size: 14px;
    }

    /* Hide Email column in mobile view */
    #employeesTable th:nth-child(3),
    #employeesTable td:nth-child(3) {
        display: none;
    }

    /* Form Styles */
    #editEmployeeForm {
        width: 95%;
        margin: 20px 10px;
        padding: 15px;
    }

    .form-pair {
        flex-direction: column;
        gap: 10px;
    }

    .form-group {
        width: 100%;
    }

    form button {
        width: 100%;
        font-size: 14px;
        padding: 12px 18px;
        
    }

    /* Table Adjustments */
    #employeesTable td {
        text-align: center;
    }

    #employeesTable th {
        font-size: 16px;
    }
}


@media screen and (max-width: 1024px) {
    /* Table Styles */
    #employeesTable {
        width: 100%;
    }

    /* Form Styles */
    .form-pair {
        flex-direction: row;
        gap: 20px;
    }

    .form-group {
        width: 48%;
    }

    form button {
        width: 100%;
        font-size: 15px;
        padding: 12px 18px;
    }
}

/* Desktop Styles */
@media screen and (min-width: 1025px) {
    /* Table Styles */
    #employeesTable {
        width: 80%;
        margin: 20px auto;
    }

    /* Form Styles */
    #editEmployeeForm {
        width: 60%;
    }

    .form-pair {
        flex-direction: row;
        gap: 20px;
    }

    .form-group {
        width: 48%;
    }

    form button {
        font-size: 16px;
        padding: 12px 20px;
        
    }
}


table {
  width: 100%;
  border-collapse: collapse; /* Ensures borders are joined */
  margin-top: 20px;
}

table th, table td {
  font-size: 12px;
  padding: 8px;
  text-align: left; /* Align text to the left */
  border: 1px solid #ddd; /* Light border for the table */
}

table td input[type="text"],
table td input[type="number"] {
  font-size: 12px;
  padding: 8px;
  width: 100%; /* Make inputs span the full width of their cell */
  border: 1px solid #ddd; /* Border for the input fields */
  border-radius: 6px;
  background-color: transparent; /* Transparent background */
  color: white; /* White text */
}

/* Button Styling */
table button[type="button"] {
  font-size: 12px;
  padding: 8px;
  background-color: #3498db; /* Blue background */
  color: white;
  border: none;
  cursor: pointer;
  border-radius: 6px;
  transition: background-color 0.3s ease;
}

table button[type="button"]:hover {
  background-color: #2980b9; /* Darker blue on hover */
}

/* Add Education button */
#addEducationBtn {
    padding: 6px 12px;
    
    background-color: transparent; /* Transparent background */
    color: transparent; /* Make text transparent */
    border: 2px solid #6a11cb; /* Border with matching purple color */
    border-radius: 4px;
    cursor: pointer;
    font-size: 12px;
    justify-content: center;
    align-items: center;
    position: relative;
    margin: 10px;
    background-image: linear-gradient(45deg, #6a11cb, #2575fc); 
    -webkit-background-clip: text; 
    background-clip: text; 
    transition: all 0.3s ease; 
}

#addEducationBtn:hover {
  background-color: #27ae60; /* Darker green on hover */
}

/* Remove Education button */
.removeEducationBtn {
  background-color: #e74c3c; /* Red background */
}

.removeEducationBtn:hover {
  background-color: #c0392b; /* Darker red on hover */
}


</style>
</head>

<body>
    <div style="margin-top: 80px; position: relative; width: 100%; align-items: center; justify-content: center; display: flex; flex-direction: column;">
      <%- include('partials/navbar') %>
  
      <h2>All Employees</h2>
      <table id="employeesTable">
        <thead>
          <tr>
            <th>Emp ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Role</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
  
      <!-- Editable Form for Employee -->
      <div id="editEmployeeForm" style="display: none;">
        <h3>Edit Employee</h3>
        <form id="employeeEditForm">
  
          <label>Emp ID:</label><br>
          <input type="text" id="editEmpId" disabled style="background-color: #343333; color: #ddd;"><br>
  
          <label>Name:</label><br>
          <input type="text" id="editName"><br>
  
          <label>Email:</label><br>
          <input type="email" id="editEmail"><br>
  
          <label>Role:</label><br>
          <select id="editRole">
            <option value="admin">Admin</option>
            <option value="manager">Manager</option>
            <option value="hr">HR</option>
            <option value="employee">Employee</option>
          </select><br>
  
          <label>Department:</label><br>
          <select type="text" id="editDepartment">
            <option value="QA">QA</option>
            <option value="SR Developer">SR Developer</option>
            <option value="JR  Developer">JR Developer</option>
            <option value="intern">Intern</option>
            <option value="Project Manager">Project Manager</option>
            <option value="Jr Project Manager">Jr Project Manager</option>
            <option value="Qa Manager">Qa Manager</option>
            <option value="DEVops Er">DEVops Er</option>
            <option value="TESTER">TESTER</option>
          </select><br>
  
          <label>Contact Number:</label><br>
          <input type="text" id="editcontact"><br>
  
          <label>Address:</label><br>
          <input type="text" id="editAddress"><br>
  
          <label>Gender:</label><br>
          <select id="editGender">
            <option value="male">Male</option>
            <option value="female">Female</option>
            <option value="other">Other</option>
          </select><br>
  
          <label>Date of Birth:</label><br>
          <input type="date" id="editDateOfBirth"><br>
  
          <label>Emergency Contact Name:</label><br>
          <input type="text" id="editEmergencyContactName"><br>
  
          <label>Emergency Contact contact:</label><br>
          <input type="text" id="editEmergencyContactcontact"><br>
  
          <label>Employment Status:</label><br>
          <select id="editEmploymentStatus">
            <option value="active">Active</option>
            <option value="on-leave">On Leave</option>
            <option value="terminated">Terminated</option>
            <option value="resigned">Resigned</option>
          </select><br>
  
          <label>Approval Status:</label><br>
          <select id="editApprovalStatus">
            <option value="pending">Pending</option>
            <option value="approved">Approved</option>
            <option value="rejected">Rejected</option>
          </select><br>
  
          <label>Hire Date:</label><br>
          <input type="date" id="editHireDate"><br>
  
          <label>Performance Rating:</label><br>
          <input type="number" id="editPerformanceRating" min="1" max="5"><br>
  
          <label>Salary:</label><br>
          <input type="number" id="editSalary"><br>
  
  
          <!-- Editable Education Section -->
          <div id="educationSection">
            <table>
              <thead>
                <tr>
                  <th>School Name</th>
                  <th>Passing Year</th>
                  <th>Degree Name</th>
                  <th>Marks</th>
                  <th>Actions</th> <!-- Add an additional header for actions -->
                </tr>
              </thead>
              <tbody>
                <tr class="editEducation">
                  <td><input type="text" class="schoolName" placeholder="School Name"></td>
                  <td><input type="number" class="passingYear" placeholder="Passing Year"></td>
                  <td><input type="text" class="degreeName" placeholder="Degree Name"></td>
                  <td><input type="text" class="marks" placeholder="Marks (e.g., CGPA, Percentage)"></td>
                  <td><button type="button" class="removeEducationBtn">Remove</button></td>
                </tr>
              </tbody>
            </table>
            <button type="button" id="addEducationBtn">Add Education</button><br>
          </div>
          
          
          <label>Work Experience:</label><br>
          <input type="text" id="editWorkExperience"><br>
  
          <label>Skills (comma-separated):</label><br>
          <input type="text" id="editSkills"><br>
  
          <label>Certifications (comma-separated):</label><br>
          <input type="text" id="editCertifications"><br>
  
          <label>Last Promotion Date:</label><br>
          <input type="date" id="editLastPromotionDate"><br>
  
          <label>Work Location:</label><br>
          <input type="text" id="editWorkLocation"><br>
  
          <label>Employment Type:</label><br>
          <select id="editEmploymentType">
            <option value="full-time">Full-time</option>
            <option value="part-time">Part-time</option>
            <option value="contract">Contract</option>
            <option value="intern">Intern</option>
          </select><br>
  
          <label>Probation Period End:</label><br>
          <input type="date" id="editProbationPeriodEnd"><br>
  
          <label>Manager Name:</label><br>
          <select id="editManagerName"></select><br>
  
          <span style="position: relative; width: 100%; display: flex; justify-content: space-between;"> 

            <span style="position: relative; width: 20%;">
                <label>Is Married:</label><br>
                <input type="checkbox" id="editIsMarried"><br>
          
          
            </span>
            <button type="button" onclick="saveEmployee()">Save</button>
            <button type="button" onclick="cancelEdit()">Cancel</button>
         </span>
          
        </form>
      </div>
  



    </div>
    <%- include('partials/footer') %>
  
    <script>
        const token = localStorage.getItem('token');
        if (!token) {
            window.location.href = '/login'; // Redirect to login if no token exists
        }
    
        // Fetch the list of managers from the API and populate the Manager Name dropdown
        async function fetchManagers() {
            try {
                const response = await fetch('/api/helpdesk/manager/employees', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                    },
                });
                const managers = await response.json();
    
                const managerSelect = document.getElementById('editManagerName');
                managerSelect.innerHTML = '';  // Clear any existing options
    
                // Add an option for each manager
                managers.forEach(manager => {
                    const option = document.createElement('option');
                    option.value = manager._id;  // Use the manager's _id for value
                    option.textContent = manager.name;  // Display the manager's name
                    managerSelect.appendChild(option);
                });
    
            } catch (error) {
                console.error('Error fetching managers:', error);
                alert('Error fetching managers');
            }
        }
    
        // Add an education entry dynamically
        document.getElementById('addEducationBtn').addEventListener('click', function () {
            const educationTableBody = document.querySelector('#educationSection table tbody');
            const newEducationRow = document.createElement('tr');
            newEducationRow.classList.add('editEducation');
    
            newEducationRow.innerHTML = `
                <td><input type="text" class="schoolName" placeholder="School Name"></td>
                <td><input type="number" class="passingYear" placeholder="Passing Year"></td>
                <td><input type="text" class="degreeName" placeholder="Degree Name"></td>
                <td><input type="text" class="marks" placeholder="Marks (e.g., CGPA, Percentage)"></td>
                <td><button type="button" class="removeEducationBtn">Remove</button></td>
            `;
    
            // Append the new row to the table body
            educationTableBody.appendChild(newEducationRow);
    
            // Add event listener for removing the entire row
            newEducationRow.querySelector('.removeEducationBtn').addEventListener('click', function () {
                educationTableBody.removeChild(newEducationRow); // Remove the entire row
            });
        });
    
        // Fetch employees and display them in a table
        async function fetchEmployees() {
            try {
                const response = await fetch('/api/emp/employees', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                    },
                });
                const employees = await response.json();
                const tableBody = document.querySelector('#employeesTable tbody');
                tableBody.innerHTML = ''; // Clear the table body before adding new data
    
                // Sort employees by hireDate in descending order (latest first)
                employees.sort((a, b) => new Date(b.hireDate) - new Date(a.hireDate));
    
                // Get the current user's role
                const userRole = localStorage.getItem('role');
    
                employees.forEach(employee => {
                    const row = document.createElement('tr');
                    let editDeleteButtons = '';
    
                    // Show "Edit" and "Delete" buttons for HR or Admin
                    if (userRole === 'admin' || userRole === 'hr') {
                        editDeleteButtons = `
                            <button onclick="editEmployee('${employee._id}')">Edit</button>
                            <button onclick="deleteEmployee('${employee._id}')">Delete</button>
                        `;
                    }
    
                    row.innerHTML = `
                        <td>${employee.empId}</td> <!-- Use MongoDB _id here -->
                        <td>${employee.name}</td>
                        <td>${employee.email}</td>
                        <td style="color: ${employee.role === 'admin' ? 'green' : 
                                         employee.role === 'hr' ? 'orange' : 
                                         employee.role === 'manager' ? 'blue' : 
                                         'red'};">
                            ${employee.role.toUpperCase()}
                        </td>
                        <td>${editDeleteButtons}</td>
                    `;
                    tableBody.appendChild(row);
                });
            } catch (error) {
                console.error('Error fetching employees:', error);
                alert('Error fetching employees');
            }
        }
    
        // Edit employee details
        async function editEmployee(id) {
            try {
                const response = await fetch(`/api/emp/employees/${id}`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                    },
                });
    
                if (!response.ok) {
                    alert('Error fetching employee details');
                    return;
                }
    
                const employee = await response.json();
    
                // Pre-fill the form with employee data
                document.getElementById('editEmployeeForm').style.display = 'block';
                document.getElementById('editEmpId').value = employee.empId;  // Display empId
                document.getElementById('editEmpId').value = employee._id;  // Use _id for PUT method
                document.getElementById('editName').value = employee.name;
                document.getElementById('editEmail').value = employee.email;
                document.getElementById('editRole').value = employee.role;
                document.getElementById('editDepartment').value = employee.department || '';
                document.getElementById('editcontact').value = employee.contact || '';
                document.getElementById('editAddress').value = employee.address || '';
                document.getElementById('editGender').value = employee.gender || 'male';
                document.getElementById('editDateOfBirth').value = employee.dateOfBirth ? employee.dateOfBirth.split('T')[0] : '';
                document.getElementById('editEmergencyContactName').value = employee.emergencyContact?.name || '';
                document.getElementById('editEmergencyContactcontact').value = employee.emergencyContact?.contact || '';
                document.getElementById('editEmploymentStatus').value = employee.employmentStatus || 'active';
                document.getElementById('editApprovalStatus').value = employee.approvalStatus || 'approved';
                document.getElementById('editHireDate').value = employee.hireDate ? employee.hireDate.split('T')[0] : '';
                document.getElementById('editPerformanceRating').value = employee.performanceRating || '';
                document.getElementById('editSalary').value = employee.salary || '';
                document.getElementById('editIsMarried').checked = employee.isMarried || false;
                document.getElementById('editWorkExperience').value = employee.workExperience || '';
                document.getElementById('editSkills').value = employee.skills?.join(', ') || '';
                document.getElementById('editCertifications').value = employee.certifications?.join(', ') || '';
                document.getElementById('editLastPromotionDate').value = employee.lastPromotionDate ? employee.lastPromotionDate.split('T')[0] : '';
                document.getElementById('editWorkLocation').value = employee.workLocation || '';
                document.getElementById('editEmploymentType').value = employee.employmentType || 'full-time';
                document.getElementById('editProbationPeriodEnd').value = employee.probationPeriodEnd ? employee.probationPeriodEnd.split('T')[0] : '';
                document.getElementById('editManagerName').value = employee.manager || '';  // Use managerId from employee
    
                // Pre-fill education section
                const educationTableBody = document.querySelector('#educationSection table tbody');
                educationTableBody.innerHTML = ''; // Clear existing rows
    
                employee.education.forEach(edu => {
                    const newRow = document.createElement('tr');
                    newRow.classList.add('editEducation');
                    newRow.innerHTML = `
                        <td><input type="text" class="schoolName" value="${edu.schoolName}" placeholder="School Name"></td>
                        <td><input type="number" class="passingYear" value="${edu.passingYear}" placeholder="Passing Year"></td>
                        <td><input type="text" class="degreeName" value="${edu.degreeName}" placeholder="Degree Name"></td>
                        <td><input type="text" class="marks" value="${edu.marks}" placeholder="Marks (e.g., CGPA, Percentage)"></td>
                        <td><button type="button" class="removeEducationBtn">Remove</button></td>
                    `;
                    educationTableBody.appendChild(newRow);
    
                                  // Add remove button functionality
                newRow.querySelector('.removeEducationBtn').addEventListener('click', function () {
                    educationTableBody.removeChild(newRow); // Remove the entire row
                });
            });

        } catch (error) {
            console.error('Error fetching employee details:', error);
            alert('Error fetching employee details');
        }
    }

    // Save edited employee details
    async function saveEmployee() {
    const id = document.getElementById('editEmpId').value;  // MongoDB _id is used here
    
    // Collect all form data
    const name = document.getElementById('editName').value;
    const email = document.getElementById('editEmail').value;
    const role = document.getElementById('editRole').value;
    const department = document.getElementById('editDepartment').value;
    const contact = document.getElementById('editcontact').value;
    const address = document.getElementById('editAddress').value;
    const gender = document.getElementById('editGender').value;
    const dateOfBirth = document.getElementById('editDateOfBirth').value;
    const emergencyContactName = document.getElementById('editEmergencyContactName').value;
    const emergencyContactcontact = document.getElementById('editEmergencyContactcontact').value;
    const employmentStatus = document.getElementById('editEmploymentStatus').value;
    const approvalStatus = document.getElementById('editApprovalStatus').value;
    const hireDate = document.getElementById('editHireDate').value;
    const performanceRating = document.getElementById('editPerformanceRating').value;
    const salary = document.getElementById('editSalary').value;
    const isMarried = document.getElementById('editIsMarried').checked;  // true if checked, false if unchecked
    const workExperience = document.getElementById('editWorkExperience').value;
    const skills = document.getElementById('editSkills').value.split(',').map(skill => skill.trim());
    const certifications = document.getElementById('editCertifications').value.split(',').map(cert => cert.trim());
    const lastPromotionDate = document.getElementById('editLastPromotionDate').value;
    const workLocation = document.getElementById('editWorkLocation').value;
    const employmentType = document.getElementById('editEmploymentType').value;
    const probationPeriodEnd = document.getElementById('editProbationPeriodEnd').value;
    const manager = document.getElementById('editManagerName').value;

    // Gather Education data
    const educationData = [];
    const educationElements = document.querySelectorAll('.editEducation');
    educationElements.forEach(education => {
        const schoolName = education.querySelector('.schoolName').value;
        const passingYear = education.querySelector('.passingYear').value;
        const degreeName = education.querySelector('.degreeName').value;
        const marks = education.querySelector('.marks').value;

        if (schoolName && passingYear && degreeName && marks) {
            educationData.push({ schoolName, passingYear, degreeName, marks });
        }
    });

    const employeeData = {
        name,
        email,
        role,
        department,
        contact,
        address,
        gender,
        dateOfBirth,
        emergencyContact: { name: emergencyContactName, contact: emergencyContactcontact },
        employmentStatus,
        approvalStatus,
        hireDate,
        performanceRating,
        salary,
        isMarried,
        workExperience,
        skills,
        certifications,
        lastPromotionDate,
        workLocation,
        employmentType,
        probationPeriodEnd,
        manager,
        education: educationData
    };


    try {
        const response = await fetch(`/api/emp/employees/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`,
            },
            body: JSON.stringify(employeeData),
        });

        if (response.ok) {
            alert('Employee updated successfully!');
            document.getElementById('editEmployeeForm').style.display = 'none';
            fetchEmployees(); // Refresh employee list
        } else {
            alert('Failed to update employee');
        }
    } catch (error) {
        alert('Error updating employee');
    }
}

    // Cancel the edit process
    function cancelEdit() {
        document.getElementById('editEmployeeForm').style.display = 'none';
    }

    // Delete an employee
    async function deleteEmployee(id) {
        if (confirm('Are you sure you want to delete this employee?')) {
            try {
                const response = await fetch(`/api/emp/employees/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                    },
                });

                if (response.ok) {
                    alert('Employee deleted successfully!');
                    fetchEmployees(); // Refresh employee list
                } else {
                    alert('Failed to delete employee');
                }
            } catch (error) {
                alert('Error deleting employee');
            }
        }
    }

    // Initial fetch
    fetchEmployees();
    fetchManagers(); // Fetch managers for the select dropdown
</script>

</body>

</html>

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>All Employees</title>
  <script src="https://cdn.jsdelivr.net/npm/jwt-decode@3.1.2/build/jwt-decode.min.js"></script>
 <style>
    /* General Styles */
body {
    background: linear-gradient(135deg, #000000, #1e3d59); /* Dark gradient background */
    color: #f5f5f5; /* Light-colored text for contrast */
    padding: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    min-height: 100vh;
    width: 100vw;
    margin: 0;
    font-family: Arial, sans-serif;
}

/* Heading Styles */
h2 {
    text-align: center;
    margin-top: 20px;
    color: #2c3e50;
}

/* Table Styles */
#employeesTable {
    width: 100%;
    margin: 20px auto;
    border-collapse: collapse;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    background-color: transparent;
}

#employeesTable th, #employeesTable td {
    padding: 10px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

#employeesTable th {
    background-color: #2c3e50;
    color: white;
}

#employeesTable tr:hover {
    background: linear-gradient(45deg, #2575fc, #296638); }




    #employeesTable button {
    padding: 6px 12px;
    background-color: transparent; /* Transparent background */
    color: transparent; /* Make text transparent */
    border: 2px solid #6a11cb; /* Border with matching purple color */
    border-radius: 4px;
    cursor: pointer;
    font-size: 12px;
    margin: 5px;
    background-image: linear-gradient(45deg, #6a11cb, #2575fc); 
    -webkit-background-clip: text; 
    background-clip: text; 
    transition: all 0.3s ease; 
}

#employeesTable button:hover {
    border-color: #2575fc; 
    color: #2575fc; 
}


/* Form Styles */
#editEmployeeForm {
    width: 100%;
    max-width: 600px;
    margin: 20px auto;
    background-color: transparent;
    padding: 20px;
    color: #3498db;
    border-radius: 5px;
    display: none;
}

#editEmployeeForm h3 {
    color: #6f7983;
    text-align: center;
}

form label {
    font-size: 14px;
    color: #555;
    margin-top: 10px;
}

form input, form select {
    width: 100%;
    padding: 10px;
    margin: 5px 0 20px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
    transition: border-color 0.3s ease;
}

/* Highlight placeholder text */
form input::placeholder,
form select::placeholder {
    color: #999;
    opacity: 0.7;
}

form input:focus, form select:focus {
    border-color: #3498db;
}

/* Paired fields layout */
.form-pair {
    display: flex;
    justify-content: space-between;
    gap: 20px;
}

.form-group {
    width: 48%;
}

.form-pair .form-group input,
.form-pair .form-group select {
    width: 100%;
}

/* Button Styles */
form button {
    padding: 10px 20px;
    background-color: #3498db;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 10px;
    font-size: 16px;
    transition: background-color 0.3s ease;
}

form button:hover {
    background-color: #2980b9;
}

form button[type="button"] {
    background-color: #e74c3c;
}

form button[type="button"]:hover {
    background-color: #c0392b;
}

/* Mobile Responsive */
/* Mobile Responsive */
@media screen and (max-width: 768px) {
    /* Table Styles */
    #employeesTable {
        width: 95%;
        margin: 10px auto;
    }

    #employeesTable th, #employeesTable td {
        padding: 8px;
        font-size: 14px;
    }

    /* Hide Email column in mobile view */
    #employeesTable th:nth-child(3),
    #employeesTable td:nth-child(3) {
        display: none;
    }

    /* Form Styles */
    #editEmployeeForm {
        width: 95%;
        margin: 20px 10px;
        padding: 15px;
    }

    .form-pair {
        flex-direction: column;
        gap: 10px;
    }

    .form-group {
        width: 100%;
    }

    form button {
        width: 100%;
        font-size: 14px;
        padding: 12px 18px;
    }

    /* Table Adjustments */
    #employeesTable td {
        text-align: center;
    }

    #employeesTable th {
        font-size: 16px;
    }
}


@media screen and (max-width: 1024px) {
    /* Table Styles */
    #employeesTable {
        width: 100%;
    }

    /* Form Styles */
    .form-pair {
        flex-direction: row;
        gap: 20px;
    }

    .form-group {
        width: 48%;
    }

    form button {
        width: 100%;
        font-size: 15px;
        padding: 12px 18px;
    }
}

/* Desktop Styles */
@media screen and (min-width: 1025px) {
    /* Table Styles */
    #employeesTable {
        width: 80%;
        margin: 20px auto;
    }

    /* Form Styles */
    #editEmployeeForm {
        width: 60%;
    }

    .form-pair {
        flex-direction: row;
        gap: 20px;
    }

    .form-group {
        width: 48%;
    }

    form button {
        font-size: 16px;
        padding: 12px 20px;
    }
}


</style>
</head>

<body>
    <div style="margin-top: 80px; position: relative; width: 100%; align-items: center;  justify-content: center; display:  flex; flex-direction: column;">
        
        <%- include('partials/navbar') %> 

  <h2>All Employees</h2>
  <table id="employeesTable">
    <thead>
      <tr>
        <th>Emp ID</th>
        <th>Name</th>
        <th>Email</th>
        <th>Role</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>

  <!-- Editable Form for Employee -->
  <div id="editEmployeeForm" style="display: none;">
    <h3>Edit Employee</h3>
    <form id="employeeEditForm">
     
        <label>Emp ID:</label><br>
      <input type="text" id="editEmpId" disabled style="background-color: #343333; color: #ddd;"><br>

      <label>Name:</label><br>
      <input type="text" id="editName"><br>

      <label>Email:</label><br>
      <input type="email" id="editEmail"><br>

      <label>Role:</label><br>
      <select id="editRole">
        <option value="admin">Admin</option>
        <option value="manager">Manager</option>
        <option value="hr">HR</option>
        <option value="employee">Employee</option>
      </select><br>

      <label>Department:</label><br>
      <input type="text" id="editDepartment"><br>

      <label>Contact Number:</label><br>
      <input type="text" id="editContactNumber"><br>

      <label>Address:</label><br>
      <input type="text" id="editAddress"><br>

      <label>Gender:</label><br>
      <select id="editGender">
        <option value="male">Male</option>
        <option value="female">Female</option>
        <option value="other">Other</option>
      </select><br>

      <label>Date of Birth:</label><br>
      <input type="date" id="editDateOfBirth"><br>

      <label>Emergency Contact Name:</label><br>
      <input type="text" id="editEmergencyContactName"><br>

      <label>Emergency Contact Phone:</label><br>
      <input type="text" id="editEmergencyContactPhone"><br>

      <label>Employment Status:</label><br>
      <select id="editEmploymentStatus">
        <option value="active">Active</option>
        <option value="on-leave">On Leave</option>
        <option value="terminated">Terminated</option>
        <option value="resigned">Resigned</option>
      </select><br>

      <label>Approval Status:</label><br>
      <select id="editApprovalStatus">
        <option value="pending">Pending</option>
        <option value="approved">Approved</option>
        <option value="rejected">Rejected</option>
      </select><br>

      <label>Hire Date:</label><br>
      <input type="date" id="editHireDate"><br>

      <label>Performance Rating:</label><br>
      <input type="number" id="editPerformanceRating" min="1" max="5"><br>

      <label>Salary:</label><br>
      <input type="number" id="editSalary"><br>

      <label>Is Married:</label><br>
      <input type="checkbox" id="editIsMarried"><br>

      <label>Education:</label><br>
      <input type="text" id="editEducation"><br>

      <label>Work Experience:</label><br>
      <input type="text" id="editWorkExperience"><br>

      <label>Skills (comma-separated):</label><br>
      <input type="text" id="editSkills"><br>

      <label>Certifications (comma-separated):</label><br>
      <input type="text" id="editCertifications"><br>

      <label>Last Promotion Date:</label><br>
      <input type="date" id="editLastPromotionDate"><br>

      <label>Work Location:</label><br>
      <input type="text" id="editWorkLocation"><br>

      <label>Employment Type:</label><br>
      <select id="editEmploymentType">
        <option value="full-time">Full-time</option>
        <option value="part-time">Part-time</option>
        <option value="contract">Contract</option>
        <option value="intern">Intern</option>
      </select><br>

      <label>Probation Period End:</label><br>
      <input type="date" id="editProbationPeriodEnd"><br>

      <label>Manager Name:</label><br>
      <input type="text" id="editManagerName"><br>

      <button type="button" onclick="saveEmployee()">Save</button>
      <button type="button" onclick="cancelEdit()">Cancel</button>
    </form>
  </div>

    </div>
    <%- include('partials/footer') %> 

  <script>
    const token = localStorage.getItem('token');
    if (!token) {
        window.location.href = '/login'; // Redirect to login if no token exists
    }

    // Fetch employees and display them in a table
    async function fetchEmployees() {
        try {
            const response = await fetch('/api/emp/employees', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                },
            });
            const employees = await response.json();
            const tableBody = document.querySelector('#employeesTable tbody');
            tableBody.innerHTML = ''; // Clear the table body before adding new data

            // Get the current user's role
            const userRole = localStorage.getItem('role');
            console.log("User Role: ", userRole);

            employees.forEach(employee => {
                const row = document.createElement('tr');
                let editDeleteButtons = '';

                // Show "Edit" and "Delete" buttons for HR or Admin
                if (userRole === 'admin' || userRole === 'hr') {
                    editDeleteButtons = `
                        <button onclick="editEmployee('${employee._id}')">Edit</button>
                        <button onclick="deleteEmployee('${employee._id}')">Delete</button>
                    `;
                }

                row.innerHTML = `
                    <td>${employee.empId}</td> <!-- Use MongoDB _id here -->
                    <td>${employee.name}</td>
                    <td>${employee.email}</td>
                    <td>${employee.role}</td>
                    <td>${editDeleteButtons}</td>
                `;
                tableBody.appendChild(row);
            });
        } catch (error) {
            console.error('Error fetching employees:', error);
            alert('Error fetching employees');
        }
    }

    // Edit employee details
    async function editEmployee(id) {
        try {
            const response = await fetch(`/api/emp/employees/${id}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                },
            });

            if (!response.ok) {
                alert('Error fetching employee details');
                return;
            }

            const employee = await response.json();

            // Pre-fill the form with employee data
            document.getElementById('editEmployeeForm').style.display = 'block';
            document.getElementById('editEmpId').value = employee.empId;  // Use MongoDB _id here
            document.getElementById('editName').value = employee.name;
            document.getElementById('editEmail').value = employee.email;
            document.getElementById('editRole').value = employee.role;
            document.getElementById('editDepartment').value = employee.department || '';
            document.getElementById('editContactNumber').value = employee.contactNumber || '';
            document.getElementById('editAddress').value = employee.address || '';
            document.getElementById('editGender').value = employee.gender || 'male';
            document.getElementById('editDateOfBirth').value = employee.dateOfBirth ? employee.dateOfBirth.split('T')[0] : '';
            document.getElementById('editEmergencyContactName').value = employee.emergencyContact?.name || '';
            document.getElementById('editEmergencyContactPhone').value = employee.emergencyContact?.phone || '';
            document.getElementById('editEmploymentStatus').value = employee.employmentStatus || 'active';
            document.getElementById('editApprovalStatus').value = employee.approvalStatus || 'approved';
            document.getElementById('editHireDate').value = employee.hireDate ? employee.hireDate.split('T')[0] : '';
            document.getElementById('editPerformanceRating').value = employee.performanceRating || '';
            document.getElementById('editSalary').value = employee.salary || '';
            document.getElementById('editIsMarried').checked = employee.isMarried || false;
            document.getElementById('editEducation').value = employee.education || '';
            document.getElementById('editWorkExperience').value = employee.workExperience || '';
            document.getElementById('editSkills').value = employee.skills?.join(', ') || '';
            document.getElementById('editCertifications').value = employee.certifications?.join(', ') || '';
            document.getElementById('editLastPromotionDate').value = employee.lastPromotionDate ? employee.lastPromotionDate.split('T')[0] : '';
            document.getElementById('editWorkLocation').value = employee.workLocation || '';
            document.getElementById('editEmploymentType').value = employee.employmentType || 'full-time';
            document.getElementById('editProbationPeriodEnd').value = employee.probationPeriodEnd ? employee.probationPeriodEnd.split('T')[0] : '';
            document.getElementById('editManagerName').value = employee.managerName || '';
        } catch (error) {
            console.error('Error fetching employee details:', error);
            alert('Error fetching employee details');
        }
    }

    // Save edited employee details
    async function saveEmployee() {
        const id = document.getElementById('editEmpId').value;  // MongoDB _id is used here
        const name = document.getElementById('editName').value;
        const email = document.getElementById('editEmail').value;
        const role = document.getElementById('editRole').value;
        const department = document.getElementById('editDepartment').value;
        const contactNumber = document.getElementById('editContactNumber').value;
        const address = document.getElementById('editAddress').value;
        const gender = document.getElementById('editGender').value;
        const dateOfBirth = document.getElementById('editDateOfBirth').value;
        const emergencyContactName = document.getElementById('editEmergencyContactName').value;
        const emergencyContactPhone = document.getElementById('editEmergencyContactPhone').value;
        const employmentStatus = document.getElementById('editEmploymentStatus').value;
        const approvalStatus = document.getElementById('editApprovalStatus').value;
        const hireDate = document.getElementById('editHireDate').value;
        const performanceRating = document.getElementById('editPerformanceRating').value;
        const salary = document.getElementById('editSalary').value;
        const isMarried = document.getElementById('editIsMarried').checked;
        const education = document.getElementById('editEducation').value;
        const workExperience = document.getElementById('editWorkExperience').value;
        const skills = document.getElementById('editSkills').value.split(',').map(skill => skill.trim());
        const certifications = document.getElementById('editCertifications').value.split(',').map(cert => cert.trim());
        const lastPromotionDate = document.getElementById('editLastPromotionDate').value;
        const workLocation = document.getElementById('editWorkLocation').value;
        const employmentType = document.getElementById('editEmploymentType').value;
        const probationPeriodEnd = document.getElementById('editProbationPeriodEnd').value;
        const managerName = document.getElementById('editManagerName').value;

        const updatedEmployee = {
            name,
            email,
            role,
            department,
            contactNumber,
            address,
            gender,
            dateOfBirth,
            emergencyContact: { name: emergencyContactName, phone: emergencyContactPhone },
            employmentStatus,
            approvalStatus,
            hireDate,
            performanceRating,
            salary,
            isMarried,
            education,
            workExperience,
            skills,
            certifications,
            lastPromotionDate,
            workLocation,
            employmentType,
            probationPeriodEnd,
            managerName
        };

        try {
            const response = await fetch(`/api/emp/employees/${id}`, {  // Use MongoDB _id here
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`,
                },
                body: JSON.stringify(updatedEmployee),
            });

            if (response.ok) {
                alert('Employee updated successfully');
                fetchEmployees(); // Re-fetch the employees list after saving
                cancelEdit(); // Hide the form and show employee list
            } else {
                const errorData = await response.json();
                console.error('Error updating employee:', errorData);
                alert('Error updating employee: ' + (errorData.message || 'Unknown error'));
            }
        } catch (error) {
            console.error('Error during save operation:', error);
            alert('Error updating employee: ' + error.message);
        }
    }

    // Cancel editing and close the form
    function cancelEdit() {
        document.getElementById('editEmployeeForm').style.display = 'none';
        document.getElementById('employeesTable').style.display = 'block'; // Show employee list again
    }

    // Delete an employee
    async function deleteEmployee(id) {
        if (confirm('Are you sure you want to delete this employee?')) {
            try {
                const response = await fetch(`/api/emp/employees/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                    },
                });

                if (response.ok) {
                    alert('Employee deleted successfully');
                    fetchEmployees(); // Re-fetch the employees list after deletion
                } else {
                    alert('Error deleting employee');
                }
            } catch (error) {
                console.error('Error deleting employee:', error);
                alert('Error deleting employee');
            }
        }
    }

    // Fetch employees when the page loads
    window.onload = fetchEmployees;
</script>

</body>

</html>

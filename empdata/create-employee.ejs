<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Employee</title>
    <style>
      /* General Styles */
body {
    background: linear-gradient(135deg, #000000, #1e3d59); /* Dark gradient background */
    color: #f5f5f5; /* Light-colored text for contrast */
    padding: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    min-height: 100vh;
    margin: 0;
    font-family: 'Arial', sans-serif;
}

/* Title Styling */
h2 {
    color: #c5c3c3; /* Light gray text color */
    font-size: 36px;
    margin-top: 30px;
    text-align: center;
    font-weight: 600;
    letter-spacing: 1px;
}

/* Form Styles */
#createEmployeeForm {
    width: 80%;
    max-width: 700px;
    margin: 20px auto;
    background-color: transparent; /* Dark background for form */
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Soft shadow */
}

/* Form Heading */
#createEmployeeForm h3 {
    color: #fff;
    text-align: center;
    font-size: 22px;
    margin-bottom: 20px;
}

/* Input fields, select box, and button styling */
form input, form select, form button {
    width: 100%; /* Adjust width to 100% for better layout */
    padding: 12px;
    margin: 12px 0;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 16px;
    background-color: transparent; /* Dark background for inputs */
    color: #fff; /* White text for inputs */
    transition: border-color 0.3s ease, background-color 0.3s ease;
}

/* Placeholder text */
form input::placeholder,
form select::placeholder {
    color: #bdc3c7;
    opacity: 0.8;
}

/* Input focus styling */
form input:focus, form select:focus {
    border-color: #3498db;
    background-color: #34495e; /* Slightly lighter dark background on focus */
}

/* Paired fields layout (50% each) */
.form-pair {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin-bottom: 20px;
}

.form-pair .form-group {
    width: 48%; /* Each input field takes up 48% of the width */
}

/* Button Styles */
form button {
    background-color: #3498db; /* Blue background for normal buttons */
    color: white;
    border: none;
    cursor: pointer;
    font-size: 16px;
    padding: 14px;
    border-radius: 6px;
    transition: background-color 0.3s ease;
    margin-top: 20px;
}

form button:hover {
    background-color: #2980b9;
}

form button[type="submit"] {
    background-color: #2ecc71; /* Green background for submit button */
}

form button[type="submit"]:hover {
    background-color: #27ae60;
}

/* Mobile Responsive */
@media screen and (max-width: 768px) {
    #createEmployeeForm {
        width: 95%;
        margin: 20px 10px;
        padding: 20px;
    }

    /* Stack fields vertically on small screens */
    .form-pair {
        flex-direction: column;
    }

    .form-pair .form-group {
        width: 100%; /* Each field takes full width on mobile */
    }

    /* Adjust button size for mobile */
    form button {
        width: 100%;
        font-size: 14px;
        padding: 12px 18px;
    }

    /* Input field adjustments for mobile */
    form input, form select {
        font-size: 16px;
        padding: 14px;
    }

    /* Smaller margins on mobile */
    form label {
        font-size: 12px;
    }
}

/* Tablet and Large Mobile Devices */
@media screen and (max-width: 1024px) {
    .form-pair {
        flex-direction: row;
        gap: 20px;
    }

    .form-pair .form-group {
        width: 48%; /* Each field takes 48% width on medium devices */
    }

    form button {
        width: 100%;
    }
}

/* Desktop Responsive */
@media screen and (min-width: 1025px) {
    #createEmployeeForm {
        width: 60%; /* Slightly narrower form for larger screens */
    }

    form input, form select, form button {
        font-size: 16px; /* Increase font size for readability on larger screens */
        padding: 16px;
    }

    form button {
        font-size: 18px;
    }

    .form-pair .form-group {
        width: 48%; /* 50% layout for two fields in a row */
    }
}
/* Table Styling */
table {
  width: 100%;
  border-collapse: collapse; /* Ensures borders are joined */
  margin-top: 20px;
}

table th, table td {
  font-size: 12px;
  padding: 8px;
  text-align: left; /* Align text to the left */
  border: 1px solid #ddd; /* Light border for the table */
}

table td input[type="text"],
table td input[type="number"] {
  font-size: 12px;
  padding: 8px;
  width: 100%; /* Make inputs span the full width of their cell */
  border: 1px solid #ddd; /* Border for the input fields */
  border-radius: 6px;
  background-color: transparent; /* Transparent background */
  color: #fff; /* White text */
}

/* Button Styling */
table button[type="button"] {
  font-size: 12px;
  padding: 8px;
  background-color: #3498db; /* Blue background */
  color: white;
  border: none;
  cursor: pointer;
  border-radius: 6px;
  transition: background-color 0.3s ease;
}

table button[type="button"]:hover {
  background-color: #2980b9; /* Darker blue on hover */
}

/* Add Education button */
#addEducationBtn {
  font-size: 14px;
  padding: 10px;
  background-color: #2ecc71; /* Green background */
  color: white;
  border: none;
  cursor: pointer;
  border-radius: 6px;
  margin-top: 10px;
  transition: background-color 0.3s ease;
}

#addEducationBtn:hover {
  background-color: #27ae60; /* Darker green on hover */
}

/* Remove Education button */
.removeEducationBtn {
  background-color: #e74c3c; /* Red background */
}

.removeEducationBtn:hover {
  background-color: #c0392b; /* Darker red on hover */
}

/* Responsive styles for smaller screens */
@media (max-width: 480px) {
  table th, table td {
    font-size: 10px;
    padding: 6px;
  }

  table td input[type="text"],
  table td input[type="number"] {
    font-size: 10px;
    padding: 6px;
  }

  table button[type="button"] {
    font-size: 10px;
    padding: 6px;
  }

  #addEducationBtn {
    font-size: 12px;
    padding: 8px;
  }
}


    </style>
</head>
<<body>
  <%- include('partials/navbar') %>

  <div style="margin-top: 60px; position: relative; width: 100%; align-items: center; justify-content: center; margin-bottom: 30px; display: flex; flex-direction: column;">
    <h2>Create Employee</h2>
    <form id="createEmployeeForm">
      <!-- Personal Information -->
      <input type="text" id="firstName" placeholder="First Name" >
      <input type="text" id="lastName" placeholder="Last Name" >
      <input type="email" id="email" placeholder="Email" >
      <input type="password" id="password" placeholder="Password" >

      <span style="display: flex; position: relative; width: 100%; flex-direction: row; justify-content: space-between;">
        <label for="dateOfBirth" style="position: relative; display:  flex; font-size: 22px; flex-direction: row; float: left; width: 30%; padding-left: 18px;  padding-top: 4%;  align-items: center;">Birth: </label>
        <input type="date" id="dateOfBirth" style="position: relative; width: 70%;" placeholder="Date of Birth" required>
      </span>

      <select id="gender" required>
        <option value="male">Male</option>
        <option value="female">Female</option>
        <option value="other">Other</option>
      </select>

      <!-- Employment Details -->
      <select id="role" required>
        <option value="employee">Employee</option>
        <option value="hr">HR</option>
        <option value="manager">Manager</option>
        <option value="admin">Admin</option>
      </select>


        <input type="date" id="hireDate" style="position: relative; width: 100%;" placeholder="Hire Date">
      
      
      

       <select type="text" id="department">
        <option value="QA">QA</option>
        <option value="SR Developer">SR Developer</option>
        <option value="JR Developer">JR Developer</option>
        <option value="Intern">Intern</option>
        <option value="Project Manager">Project Manager</option>
        <option value="Jr Project Manager">Jr Project Manager</option>
        <option value="Qa Manager">Qa Manager</option>
        <option value="DEVops Er">DEVops Er</option>
        <option value="TESTER">TESTER</option>
      </select><br>

      <input type="text" id="salary" placeholder="Salary">
      
      <select id="isActive">
        <option value="active">Active</option>
        <option value="inactive">Inactive</option>
        <option value="waiting">On Waiting</option>
        <option value="processing">Processing</option>
      </select>

      <!-- Manager ID dropdown populated from API -->
      <select id="managerId"></select>

      <select id="employmentType">
        <option value="full-time">Full-time</option>
        <option value="part-time">Part-time</option>
        <option value="contract">Contract</option>
      </select>

      <!-- Contact Information -->
      <input type="tel" id="contact" placeholder="contact Number">
      <input type="text" id="address" placeholder="Address">
      <input type="text" id="city" placeholder="City">
      <input type="text" id="state" placeholder="State">
      <input type="text" id="zipCode" placeholder="Zip Code">
      <input type="text" id="country" placeholder="Country">

      <!-- Emergency Contact -->
      <input type="text" id="emergencyContactName" placeholder="Emergency Contact Name">
      <input type="tel" id="emergencyContactcontact" placeholder="Emergency Contact contact">

      <!-- Education Section with Add Button -->
      <div id="educationSection">
        <!-- Initial education entry -->
        <div id="educationSection">
          <table id="educationTable">
            <thead>
              <tr>
                <th>School Name</th>
                <th>Passing Year</th>
                <th>Degree Name</th>
                <th>Marks</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <tr class="educationEntry">
                <td><input type="text" class="schoolName" placeholder="School Name" required></td>
                <td><input type="number" class="passingYear" placeholder="Passing Year" required></td>
                <td><input type="text" class="degreeName" placeholder="Degree Name" required></td>
                <td><input type="text" class="marks" placeholder="Marks (e.g., CGPA, Percentage)" required></td>
                <td><button type="button" class="removeEducationBtn" style="color: #2980b9;">Remove</button></td>
              </tr>
            </tbody>
          </table>
          <button type="button" id="addEducationBtn" style="background-color: transparent; color: #faa79e; cursor: pointer;">Add Education</button>
        </div>
        
      <!-- Skills Section with Add Button -->
      <div id="skillsSection">
        <input type="text" class="skillsInput" placeholder="Enter Skill">
      </div>
      <button type="button" id="addSkillBtn">Add Skill</button>

      <span style="display: flex; justify-content: space-around;">      
        <button type="submit" style="width: 45%; background-color: #27ae5f76;">Create</button>
        <button type="button" id="closeBtn" style="width: 45%; background-color: #5450d769;">Close</button>

      </span>

      <!-- Close Button -->
    </form>
  </div>

  <%- include('partials/footer') %>

  <script>
    // Function to fetch and populate manager options
    document.addEventListener('DOMContentLoaded', async () => {
      try {
        const response = await fetch('/api/helpdesk/allemp/employees');
        const employees = await response.json();

        const managerSelect = document.getElementById('managerId');
        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        defaultOption.textContent = 'Select a Manager';
        managerSelect.appendChild(defaultOption);

        employees.forEach(employee => {
          const option = document.createElement('option');
          option.value = employee._id;
          option.textContent = employee.name;
          managerSelect.appendChild(option);
        });
      } catch (error) {
        console.error('Error fetching employees:', error);
        alert('Failed to load employee list.');
      }
    });

    // Form submission handler
    document.getElementById('createEmployeeForm').addEventListener('submit', async (e) => {
      e.preventDefault();

      const token = localStorage.getItem('token');
      if (!token) {
        alert('Please login first.');
        window.location.href = '/login';
        return;
      }

      // Collect education data
      const educationEntries = Array.from(document.querySelectorAll('.educationEntry')).map(entry => ({
        schoolName: entry.querySelector('.schoolName').value || 'N/A',
        passingYear: entry.querySelector('.passingYear').value || 'N/A',
        degreeName: entry.querySelector('.degreeName').value || 'N/A',
        marks: entry.querySelector('.marks').value || 'N/A',
      }));

      // Collect skills data (skills array)
      const skills = Array.from(document.querySelectorAll('.skillsInput')).map(input => input.value).filter(skill => skill.trim() !== '');

      // Collect other form data (personal, employment, etc.)
      const data = {
        name: `${document.getElementById('firstName').value} ${document.getElementById('lastName').value}`,
        email: document.getElementById('email').value,
        password: document.getElementById('password').value,
        dateOfBirth: document.getElementById('dateOfBirth').value,
        gender: document.getElementById('gender').value,
        role: document.getElementById('role').value,
        hireDate: document.getElementById('hireDate').value || new Date().toISOString().split('T')[0],        department: document.getElementById('department').value || 'N/A',
        salary: document.getElementById('salary').value || 'N/A',
        isActive: document.getElementById('isActive').value || 'N/A',
        manager: document.getElementById('managerId').value || 'N/A',
        employmentType: document.getElementById('employmentType').value || 'N/A',
        contact: document.getElementById('contact').value || 'N/A',
        address: document.getElementById('address').value || 'N/A',
        city: document.getElementById('city').value || 'N/A',
        state: document.getElementById('state').value || 'N/A',
        zipCode: document.getElementById('zipCode').value || 'N/A',
        country: document.getElementById('country').value || 'N/A',
        emergencyContactName: document.getElementById('emergencyContactName').value || 'N/A',
        emergencyContactcontact: document.getElementById('emergencyContactcontact').value || 'N/A',
        education: educationEntries, // This is where the education array is included
        skills: skills, // Collecting skills
      };

      // Send the collected data to the API endpoint
      try {
        const response = await fetch('/api/emp/signup', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          },
          body: JSON.stringify(data),
        });

        const result = await response.json();
        if (response.status === 201) {
          alert('Employee created successfully!');
        } else {
          alert(result.message || 'Error creating employee');
        }
      } catch (error) {
        alert('Error creating employee');
      }
    });
    
    // Add Education Input
    document.getElementById('addEducationBtn').addEventListener('click', function() {
      // Get the table body
      const tableBody = document.querySelector('#educationTable tbody');

      // Create a new row with input fields for education
      const newRow = document.createElement('tr');
      newRow.classList.add('educationEntry');

      newRow.innerHTML = `
        <td><input type="text" class="schoolName" placeholder="School Name"></td>
        <td><input type="number" class="passingYear" placeholder="Passing Year"></td>
        <td><input type="text" class="degreeName" placeholder="Degree Name"></td>
        <td><input type="text" class="marks" placeholder="Marks (e.g., CGPA, Percentage)"></td>
        <td><button type="button" class="removeEducationBtn">Remove</button></td>
      `;

      // Append the new row to the table body
      tableBody.appendChild(newRow);

      // Add event listener to the "Remove" button in the newly added row
      const removeButton = newRow.querySelector('.removeEducationBtn');
      removeButton.addEventListener('click', function() {
        newRow.remove(); // Remove the row when the button is clicked
      });
    });

    // Add Skill Input
    document.getElementById('addSkillBtn').addEventListener('click', () => {
      const skillsSection = document.getElementById('skillsSection');
      const newInput = document.createElement('input');
      newInput.type = 'text';
      newInput.classList.add('skillsInput');
      newInput.placeholder = 'Enter Skill';
      skillsSection.appendChild(newInput);
    });

    // Close button functionality
    document.getElementById('closeBtn').addEventListener('click', () => {
      window.location.href = '/';  // Redirect to the employees page
    });
  </script>
</body>
</html>

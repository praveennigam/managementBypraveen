<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>All Tickets</title>
  <style>
    /* Body Style with gradient background */
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #000000, #1e3d59);
      /* Dark gradient background */
      color: #fff;
      /* White text for contrast */
      padding: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      min-height: 100vh;
      overflow-y: auto;
      margin: 0;
    }

    /* Title Styling with gradient text */
    h1 {
      color: transparent;
      background-image: linear-gradient(45deg, #ff4d4d, #ff9a8b, #4d94ff);
      /* Colorful gradient */
      -webkit-background-clip: text;
      font-size: 36px;
      text-align: center;
      margin-top: 30px;
    }

    /* Styling for the inline filter and search section */
    .search-filter-container {
      display: flex;
      justify-content: flex-start;
      align-items: center;
      gap: 20px;
      margin-bottom: 20px;
      width: 100%;
      max-width: 1000px;
      padding: 6px;
      background-color: rgba(255, 255, 255, 0.2);
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }

    label {
      font-weight: bold;
      color: #fff;
      font-size: 14px;
    }

    input[type="text"],
    select,
    textarea {
      padding: 10px;
      font-size: 14px;
      border-radius: 8px;
      border: 1px solid transparent;
      width: 200px;
      background: transparent;
      color: gray;
      box-sizing: border-box;
      transition: background 0.3s ease, border 0.3s ease;
    }

    input[type="text"]:focus,
    select:focus,
    textarea:focus {
      background: linear-gradient(45deg, #d84f7e, #ff9a8b);
      border: 1px solid #fff;
    }

    .statusselect {
      padding: 8px;
      font-size: 12px;
      border-radius: 8px;
      border: 1px solid transparent;
      width: 100px;
      background: linear-gradient(135deg, #000000, #1e3d59);
      /* Dark gradient background */
      color: #fff;
      box-sizing: border-box;
    }

    /* Buttons with gradient */
    button {
      padding: 8px 12px;
      max-width: 100px;
      margin: 10px;
      background: linear-gradient(135deg, #000000, #1e3d59);
      /* Dark gradient background */
      color: #fff;
      font-size: 14px;
      border: 1px solid transparent;
      border-radius: 8px;
      cursor: pointer;
      transition: background 0.3s ease, box-shadow 0.3s ease;
    }

    button:hover {
      background: linear-gradient(45deg, #d84f7e, #ff9a8b);
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    }

    button:disabled {
      background: rgba(255, 255, 255, 0.1);
      cursor: not-allowed;
    }

    /* Notes section styled with colorful gradients like WhatsApp chat bubbles */
    .note {
      padding: 15px;
      margin: 10px 0;
      border-radius: 8px;
      font-size: 14px;
      color: #fff;
      position: relative;
      max-width: 75%;
      background: linear-gradient(45deg, #ff9a8b, #ff6a00);
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
      display: inline-block;
      border-bottom-left-radius: 0;
    }

    .note::after {
      content: "";
      position: absolute;
      bottom: -8px;
      left: 15px;
      width: 0;
      height: 0;
      border-left: 8px solid transparent;
      border-top: 8px solid #ff9a8b;
    }

    .note.success {
      background: linear-gradient(45deg, #28a745, #4caf50);
    }

    .note.error {
      background: linear-gradient(45deg, #dc3545, #ff4040);
    }

    .note.warning {
      background: linear-gradient(135deg, #000000, #1e3d59);
      /* Dark gradient background */
    }

    /* Ticket and chat section styles */
    .ticket p {
      margin: 8px 0;
      font-size: 14px;
      color: #fff;
    }

    #ticket-list {
      width: 100%;
      margin-top: 30px;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    /* Individual Ticket Styling */
    .ticket {
      background: transparent;
      margin: 15px 0;
      padding: 20px;
      border-radius: 8px;
      width: 100%;
      display: flex;
      flex-direction: column;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }

    .ticket-details {
      margin-top: 20px;
      background: linear-gradient(135deg, #000000, #1e3d59);
      /* Dark gradient background */
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
      display: none;
    }

    .ticket-details input,
    .ticket-details select,
    .ticket-details textarea {
      width: 100%;
      padding: 10px;
      font-size: 14px;
      border-radius: 8px;
      border: 1px solid transparent;
      background: linear-gradient(135deg, #000000, #1e3d59);
      /* Dark gradient background */
      color: #fff;
    }

    /* Expanded width for .d2 when editing */
    .d2.expanded {
      width: 100%;
      flex-direction: row;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .search-filter-container {
        flex-direction: column;
        align-items: stretch;
      }

      .ticket {
        flex-direction: column;
      }

      .ticket-details textarea {
        width: 100%;
      }
    }

    @media (max-width: 480px) {
      h1 {
        font-size: 28px;
      }

      .ticket {
        padding: 15px;
      }

      .ticket button {
        font-size: 12px;
        padding: 6px 10px;
      }

      textarea {
        width: 90%;
      }
    }
  </style>


  <script src="/socket.io/socket.io.js"></script>
</head>

<body>
  <%- include('partials/navbar') %>
    <div
      style="margin-top: 80px; position: relative; width: 98%; padding-bottom:20px ; align-items: center;  justify-content: center; display:  flex; flex-direction: column;">

      <h1>All Tickets</h1>

      <!-- Search by Employee Name -->

      <div>
        <label for="search-name">Search by Employee Name:</label>
        <input type="text" id="search-name" placeholder="Enter name to search" oninput="filterTicketsByName()">
      </div>

      <!-- Filter by HR Assigned -->
      <div>
        <label for="filter-hr">Filter by HR Assigned:</label>
        <select id="filter-hr">
          <option value="">All</option>
          <!-- HR names will be populated here -->
        </select>
        <button onclick="applyHRFilter()">Apply Filter</button>
      </div>

      <!-- Container for ticket list -->
      <div id="ticket-list"></div>
    </div>

    <%- include('partials/footer') %>


      <script>
        // Initialize Socket.IO connection
        const socket = io();

        // Store HR data for filtering
        let hrEmployees = [];

        // Function to check if the current user is an admin
        function isAdmin() {
          const role = localStorage.getItem('role');
          return role === 'admin';  // Check if the role in localStorage is 'admin'
        }

        // Function to filter tickets by employee name
        function filterTicketsByName() {
          const searchValue = document.getElementById('search-name').value.toLowerCase();
          const tickets = document.querySelectorAll('.ticket');
          tickets.forEach(ticket => {
            const employeeName = ticket.querySelector('.employee-name').textContent.toLowerCase();
            ticket.style.display = employeeName.includes(searchValue) ? '' : 'none';
          });
        }

        // Function to filter tickets by HR assigned
        function applyHRFilter() {
          const selectedHR = document.getElementById('filter-hr').value;
          const tickets = document.querySelectorAll('.ticket');
          tickets.forEach(ticket => {
            const assignedHR = ticket.querySelector('.assigned-hr').dataset.hrId;
            if (selectedHR) {
              ticket.style.display = assignedHR === selectedHR ? '' : 'none';
            } else {
              ticket.style.display = '';
            }
          });
        }

        // Fetch and render all tickets
        async function loadAllTickets() {
          try {
            const response = await fetch('/api/helpdesk');
            if (!response.ok) {
              console.error('Failed to load tickets:', response.statusText);
              throw new Error('Failed to load tickets');
            }

            const tickets = await response.json();

            // Sort tickets: Latest tickets first
            tickets.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

            const ticketList = document.getElementById('ticket-list');

            ticketList.innerHTML = tickets.map(ticket => {
              // Separate out description and issue if necessary
              let issueDescription = ticket.description || '';
              let issue = ticket.issue || 'No issue provided';

              let description = '';
              if (issueDescription) {
                const parts = issueDescription.split('Description:');
                if (parts.length > 1) {
                  description = parts[1].trim();
                } else {
                  description = issueDescription;
                }
              }

              // Add a class to highlight unseen tickets (example: "unseen-ticket")
              const ticketClass = ticket.seen === false ? 'unseen-ticket' : '';

              return `
        <div class="ticket ${ticketClass}">
          <div class= "d1">
            <p><strong>Ticket ID:</strong> ${ticket.ticketId}</p>
            <p><strong>Description:</strong> ${description || 'No description provided'}</p>
            <p><strong>Issue:</strong> ${issue}</p>
            <p><strong>Employee Name:</strong> <span class="employee-name">${ticket.employeeId ? ticket.employeeId.name : 'N/A'}</span></p>
            <p><strong>Assigned HR:</strong> 
              <span class="assigned-hr" data-hr-id="${ticket.assignedToHR ? ticket.assignedToHR._id : ''}">
                ${ticket.assignedToHR ? ticket.assignedToHR.name : 'Not assigned'}
              </span>
            </p>
            <p><strong>Status:</strong> 
              <select class="statusselect" id="status-${ticket.ticketId}" ${isAdmin() ? '' : 'disabled'}>
                <option value="open" ${ticket.status === 'open' ? 'selected' : ''}>Open</option>
                <option value="in-progress" ${ticket.status === 'in-progress' ? 'selected' : ''}>In Progress</option>
                <option value="closed" ${ticket.status === 'closed' ? 'selected' : ''}>Closed</option>
              </select>
            </p>
            <span>  
              <button onclick="saveStatus('${ticket.ticketId}')">Save Status</button>
              <button onclick="toggleTicketDetails('${ticket.ticketId}')">Edit</button>
              <button onclick="deleteTicket('${ticket.ticketId}')">Delete</button>
            </span>
          </div>
          <div class="d2">
            <div id="ticket-details-${ticket.ticketId}" class="ticket-details" style="display: none; background:transparent;">
              <p><strong>Issue:</strong> 
                <input type="text" id="issue-${ticket.ticketId}" value="${ticket.issue}" ${isAdmin() ? '' : 'disabled'} />
              </p>
              <p><strong>Priority:</strong>
                <input type="text" id="priority-${ticket.ticketId}" value="${ticket.priority}" ${isAdmin() ? '' : 'disabled'} />
              </p>
              <p><strong>Assigned HR:</strong> 
                <input type="text" id="assignedHR-${ticket.ticketId}" value="${ticket.assignedToHR ? ticket.assignedToHR.name : 'Not assigned'}" disabled />
              </p>
              <div>
                <label for="assign-hr-${ticket.ticketId}">Assign HR:</label>
                <select id="assign-hr-${ticket.ticketId}" ${isAdmin() ? '' : 'disabled'}>
                  <option value="">Select HR</option>
                </select>
                <button onclick="assignHR('${ticket.ticketId}')">Assign HR</button>
              </div>
              <strong>Notes:</strong>
              
              
              <ul id="notes-list-${ticket.ticketId}">
                ${ticket.notes.map(note => `
                  <li style="decoration:none;">
                   <strong class="note-content" style=" font-size:13px;">Note: <span style=" font-size:11px; color:green; ">${note.note} </span></strong> <br/>
              <strong class="note-posted-by"style=" font-size:13px;">Posted By: <span style="color:tomato;"style=" font-size:11px;">${note.createdByName}</span> </strong> <br/>
              <strong class="note-created-at" style="color:grey; font-size:13px;">Created At: <span style="color:grey; font-size:11px;"> ${new Date(note.createdAt).toLocaleString()} </span> </strong> 
            
           




           
                    




                `).join('')}
              </ul>
              <textarea class="rrre" id="new-note-${ticket.ticketId}" ${isAdmin() ? '' : 'disabled'}></textarea>
              <button onclick="addNote('${ticket.ticketId}')">Add Note</button>
            </div>
          </div>
        </div>  
      `;
            }).join('');

            await loadHREmployees();
          } catch (error) {
            console.error('Error loading tickets:', error);
            document.getElementById('ticket-list').innerHTML = '<p>Error loading tickets. Please try again later.</p>';
          }
        }

        // Fetch HR employees to populate the dropdown
        async function loadHREmployees() {
          try {
            const response = await fetch('/api/helpdesk/hr/employees');
            if (!response.ok) {
              console.error('Failed to fetch HR employees:', response.statusText);
              throw new Error('Failed to load HR employees');
            }

            hrEmployees = await response.json();
            const hrSelect = document.getElementById('filter-hr');
            hrSelect.innerHTML = '<option value="">ALL</option>';

            hrEmployees.forEach(hr => {
              const option = document.createElement('option');
              option.value = hr._id;
              option.textContent = hr.name;
              hrSelect.appendChild(option);
            });

            document.querySelectorAll('.ticket-details').forEach(details => {
              const select = details.querySelector('select[id^="assign-hr-"]');
              if (select) {
                hrEmployees.forEach(hr => {
                  const option = document.createElement('option');
                  option.value = hr._id;
                  option.textContent = hr.name;
                  select.appendChild(option);
                });
              }
            });
          } catch (error) {
            console.error('Error loading HR employees:', error);
          }
        }

        // Toggle visibility and editable state of ticket details
        function toggleTicketDetails(ticketId) {
          const details = document.getElementById(`ticket-details-${ticketId}`);
          const statusSelect = document.getElementById(`status-${ticketId}`);
          const issueInput = document.getElementById(`issue-${ticketId}`);
          const priorityInput = document.getElementById(`priority-${ticketId}`);
          const assignedHRInput = document.getElementById(`assignedHR-${ticketId}`);
          const assignHRSelect = document.getElementById(`assign-hr-${ticketId}`);

          const isEditing = details.style.display === 'block';
          details.style.display = isEditing ? 'none' : 'block';

          issueInput.disabled = isEditing;
          priorityInput.disabled = isEditing;
          assignedHRInput.disabled = isEditing;
          assignHRSelect.disabled = isEditing;
          statusSelect.disabled = isEditing;
        }

        // Assign HR to the ticket
        async function assignHR(ticketId) {
          const hrId = document.getElementById(`assign-hr-${ticketId}`).value;
          if (!hrId) return alert('Please select an HR');

          try {
            const response = await fetch(`/api/helpdesk/${ticketId}/assign`, {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ userId: hrId })
            });

            if (response.ok) {
              const updatedTicket = await response.json();
              alert('HR assigned successfully');
              const assignedHRInput = document.getElementById(`assignedHR-${ticketId}`);
              assignedHRInput.value = updatedTicket.assignedToHR ? updatedTicket.assignedToHR.name : 'Not assigned';

              socket.emit('ticketUpdate', { ticketId, assignedToHR: hrId });
            } else {
              alert('Failed to assign HR');
            }
          } catch (error) {
            console.error('Error assigning HR:', error);
            alert('Error assigning HR');
          }
        }

        // Save updated status
        async function saveStatus(ticketId) {
          const newStatus = document.getElementById(`status-${ticketId}`).value;

          try {
            const response = await fetch(`/api/helpdesk/${ticketId}/status`, {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ status: newStatus })
            });

            if (response.ok) {
              alert('Status updated successfully');
              socket.emit('ticketUpdate', { ticketId, status: newStatus });
            } else {
              alert('Failed to update status');
            }
          } catch (error) {
            console.error('Error updating status:', error);
            alert('Error updating status');
          }
        }

        // Add note to the ticket
        async function addNote(ticketId) {
          const noteText = document.getElementById(`new-note-${ticketId}`).value;
          if (!noteText) return alert('Please enter a note');

          const userId = localStorage.getItem('userId');
          if (!userId) return alert('User not logged in');

          try {
            const response = await fetch(`/api/helpdesk/${ticketId}/note`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ note: noteText, userId: userId })
            });

            if (response.ok) {
              alert('Note added successfully');
              loadAllTickets(); // Reload tickets to show updated note
            } else {
              alert('Failed to add note');
            }
          } catch (error) {
            console.error('Error adding note:', error);
            alert('Error adding note');
          }
        }

        // Delete ticket
        async function deleteTicket(ticketId) {
          if (!confirm("Are you sure you want to delete this ticket?")) {
            return;
          }

          try {
            const response = await fetch(`/api/helpdesk/${ticketId}`, {
              method: 'DELETE',
              headers: { 'Content-Type': 'application/json' }
            });

            if (response.ok) {
              alert('Ticket deleted successfully');
              loadAllTickets(); // Reload the ticket list to reflect the deletion
            } else {
              alert('Failed to delete ticket');
            }
          } catch (error) {
            console.error('Error deleting ticket:', error);
            alert('Error deleting ticket');
          }
        }

        // Initialize page by loading all tickets
        window.onload = loadAllTickets;
      </script>
</body>

</html>